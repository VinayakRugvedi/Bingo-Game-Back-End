{"version":3,"sources":["Components/Square/Square.js","Components/ModalWindow/ModalWindow.js","socketListeners.js","Components/Board/Board.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","assignValue","bind","assertThisInitialized","square","value","updateSquareValue","position","_this2","react_default","a","createElement","style","backgroundColor","color","className","title","onClick","boardSet","marked","myTurn","talkToServer","React","Component","ModalWindow","modalData","heading","description","startGameAgain","setSocketListeners","self","socket","on","room","console","log","roomName","setState","myRoom","size","playerAvailable","valueObj","squaresCopy","state","squares","statusCopy","status","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","cols","rows","Math","floor","diags","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","emit","modalWindow","display","Board","index","valueGenerator","socketIoClient","connect","buttonSet","Array","fill","map","item","readyToPlay","setTheBoard","initialState","JSON","parse","stringify","values","boundary","randomValues","i","length","random","push","splice","id","close","Components_Square_Square","key","e","Squares","renderSquares","Components_ModalWindow_ModalWindow","ReactDOM","render","Components_Board_Board","document","getElementById"],"mappings":"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","file":"static/js/main.4c793830.chunk.js","sourcesContent":["import React from 'react'\nimport './Square.css'\n\nclass Square extends React.Component {\n  constructor (props) {\n    super (props)\n    this.assignValue = this.assignValue.bind(this)\n  }\n\n  assignValue () {\n    if (!this.props.square.value) {\n      this.props.updateSquareValue(this.props.square.position)\n    }\n  }\n\n  render () {\n    return (\n      <div\n        style={{backgroundColor : this.props.square.color}}\n        className=\"squareContainer\"\n        title={this.props.square.value ? 'Click to mark this number' : 'Click to assign a number'}\n        onClick={(this.props.square.value && this.props.boardSet)\n                  ? () => {\n                    if(!this.props.square.marked && this.props.myTurn)\n                    this.props.talkToServer(this.props.square.position)\n                  }\n                  : this.assignValue}>\n        <div className=\"valueHolder\">{(this.props.square.value) ? this.props.square.value : ''}</div>\n      </div>\n    )\n  }\n}\n\nexport default Square\n","import React from 'react'\nimport './ModalWindow.css'\n\nfunction ModalWindow(props) {\n  return (\n    <div className=\"modalWindowBG\">\n      <div className=\"modalWindowContent\">\n        <div className=\"content\">\n          <p>{props.modalData.heading}</p>\n          <p>{props.modalData.description}</p>\n          <button onClick={props.startGameAgain}>Play Again!</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ModalWindow\n","function setSocketListeners(self) {\n  self.socket.on('sendRoomName', (room) => {\n    console.log(room.roomName);\n    self.setState({\n      myRoom : room.roomName\n    })\n  })\n\n  self.socket.on('playerAvailable', (size) => {\n    console.log(size)\n    self.setState({\n      playerAvailable : true\n    })\n  })\n\n  self.socket.on('update', (valueObj) => {\n    let squaresCopy = self.state.squares, position, statusCopy = self.state.status\n    for (let square of squaresCopy) {\n      if(square.value === valueObj.value) {\n        square.color = '#f67e7d'\n        square.marked = true\n        position = square.position\n        break\n      }\n    }\n    statusCopy.cols[position % 5] -= 1\n    statusCopy.rows[Math.floor(position / 5)] -= 1\n    if(position === 12) {\n      statusCopy.diags[0] -= 1\n      statusCopy.diags[1] -= 1\n    }\n    else if(position % 6 === 0) statusCopy.diags[0] -= 1\n    else if(position % 4 === 0) statusCopy.diags[1] -= 1\n\n    let count = 0\n    for(let item of statusCopy.rows) {\n      if(item === 0) count++\n    }\n    for(let item of statusCopy.cols) {\n      if(item === 0) count++\n    }\n    for(let item of statusCopy.diags) {\n      if(item === 0) count++\n    }\n\n    if(count >= 5) {\n      self.socket.emit('winner')\n      self.setState({\n        modalWindow : {\n          display : true,\n          heading : 'Congratulations!',\n          description : 'Finally, you have won the game...'\n        }\n      })\n    } else {\n      self.setState({\n        squares : squaresCopy,\n        myTurn : true,\n        status : statusCopy\n      })\n    }\n  })\n\n  self.socket.on('lost', () => {\n    self.setState({\n      modalWindow : {\n        display : true,\n        heading : 'Disappointment',\n        description : 'You lost, better luck next time...'\n      }\n    })\n  })\n\n  self.socket.on('playerDisconnected', () => {\n    // self.socket.close()\n    self.setState({\n      modalWindow : {\n        display : true,\n        heading : 'OOPS!',\n        description : 'Looks like the other player has left'\n      }\n    })\n  })\n}\n\nexport default setSocketListeners\n","import React from 'react'\n\nimport './Board.css'\nimport Square from '../Square/Square.js'\nimport ModalWindow from '../ModalWindow/ModalWindow.js'\n\nimport socketIoClient from 'socket.io-client'\nimport setSocketListeners from '../../socketListeners.js'\n\nclass Board extends React.Component {\n  constructor () {\n    super ()\n    this.state = {\n      valueGenerator : 1,\n      squares : new Array(25).fill().map(function (item, index) {\n        return ({\n          value : 0,\n          color : '#00a8b5',\n          marked : false,\n          position : index\n        })\n      }),\n      boardSet : false,\n      myTurn : false,\n      buttonSet : 'none',\n      myRoom : '',\n      playerAvailable : false,\n      status : {rows : [5,5,5,5,5], cols : [5,5,5,5,5], diags : [5,5]},\n      modalWindow : {\n        display : 'none',\n        heading : '',\n        description: ''\n      }\n    }\n    this.readyToPlay = this.readyToPlay.bind(this)\n    this.setTheBoard = this.setTheBoard.bind(this)\n    this.startGameAgain = this.startGameAgain.bind(this)\n  }\n\n  componentDidMount () {\n    this.initialState = JSON.parse(JSON.stringify(this.state))\n  }\n\n  updateSquareValue = (index) => {\n    let squaresCopy = this.state.squares\n    squaresCopy[index].value = this.state.valueGenerator\n    if (this.state.valueGenerator === 25) {\n      this.socket = socketIoClient.connect('https://play-bingo.herokuapp.com/')\n      setSocketListeners(this)\n      this.setState ({\n        valueGenerator : this.state.valueGenerator + 1,\n        squares : squaresCopy,\n        buttonSet : ''\n      })\n    } else {\n      this.setState ({\n        valueGenerator : this.state.valueGenerator + 1,\n        squares : squaresCopy\n      })\n    }\n  }\n\n  setTheBoard () {\n    let values = [], boundary = 25, randomValues = []\n    for(let i = 1; i < 26; i++) values[i-1] = i\n    while(values.length !== 0) {\n      let index = Math.floor(Math.random() * boundary)\n      randomValues.push(values[index])\n      values.splice(index, 1)\n      boundary--\n    }\n\n    let squaresCopy = this.state.squares\n    for(let square of squaresCopy) {\n      square.value = randomValues[boundary++]\n    }\n    this.socket = socketIoClient.connect('https://play-bingo.herokuapp.com/')\n    setSocketListeners(this)\n\n    this.setState({\n      valueGenerator : 26,\n      squares : squaresCopy,\n      buttonSet : ''\n    })\n  }\n\n  readyToPlay () {\n    this.setState({\n      boardSet : true,\n      buttonSet : 'none',\n      myTurn : true\n    })\n  }\n\n  talkToServer = (position) => {\n    let squaresCopy = this.state.squares, statusCopy = this.state.status\n    squaresCopy[position].color = '#f67e7d'\n    squaresCopy[position].marked = true\n\n    statusCopy.cols[position % 5] -= 1\n    statusCopy.rows[Math.floor(position / 5)] -= 1\n    if(position === 12) {\n      statusCopy.diags[0] -= 1\n      statusCopy.diags[1] -= 1\n    }\n    else if(position % 6 === 0) statusCopy.diags[0] -= 1\n    else if(position % 4 === 0) statusCopy.diags[1] -= 1\n\n    let count = 0\n    for(let item of statusCopy.rows) {\n      if(item === 0) count++\n    }\n    for(let item of statusCopy.cols) {\n      if(item === 0) count++\n    }\n    for(let item of statusCopy.diags) {\n      if(item === 0) count++\n    }\n\n    if(count >= 5) {\n      this.socket.emit('winner')\n      this.setState({\n        modalWindow : {\n          display : true,\n          heading : 'Congratulations!',\n          description : 'Finally, you have won the game...'\n        }\n      })\n    } else {\n      this.socket.emit('myValue', squaresCopy[position].value, this.state.myRoom)\n      this.setState({\n        squares : squaresCopy,\n        myTurn : false,\n        status : statusCopy\n      })\n    }\n  }\n\n  startGameAgain () {\n    if(this.socket.id) this.socket.close()\n    this.setState(JSON.parse(JSON.stringify(this.initialState)))\n  }\n\n  renderSquares () {\n    let squares = this.state.squares.map( (square, index) => {\n      return <Square\n              key={index}\n              updateSquareValue={(e, index) => this.updateSquareValue(e, index)}\n              talkToServer={(index) => this.talkToServer(index)}\n              square={square}\n              myTurn={this.state.myTurn}\n              boardSet={this.state.boardSet}/>\n    }\n    )\n    return squares\n  }\n\n  render () {\n    const Squares = this.renderSquares()\n    return (\n      <div className=\"gameContainer\">\n        <div className=\"boardContainer\">\n          {Squares}\n        </div>\n        <div className=\"checkpointButtons\">\n          { this.state.valueGenerator <= 25\n            ? <button className=\"buttonBeforeBoardSet\"\n              onClick={this.setTheBoard}>\n              Setup your Board or click here to set it up!</button>\n            : !this.state.playerAvailable\n              ? <span className=\"buttonWaiting\">Waiting for a player...</span>\n              : !this.state.boardSet\n                ? <button className=\"buttonAfterBoardSet\"\n                    style={{display : this.state.buttonSet}}\n                    onClick={this.readyToPlay}>\n                    Click here & Start your Game!</button>\n                : this.state.myTurn\n                  ? <span className=\"myTurnButton\">Your turn dude!</span>\n                  : <span className=\"myTurnButton\">Wait for your turn...</span>\n          }\n        </div>\n        <div style={{display:this.state.modalWindow.display}}>\n          <ModalWindow modalData={this.state.modalWindow} startGameAgain={this.startGameAgain}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Board\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Board from './Components/Board/Board.js'\n\nReactDOM.render(\n  <Board/>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}